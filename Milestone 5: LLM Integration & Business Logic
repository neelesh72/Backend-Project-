
pgsql
Copy
Edit
backend/
â””â”€â”€ app/
    â”œâ”€â”€ api/
    â”‚   â””â”€â”€ chat.py
    â”œâ”€â”€ config.py               âœ… (NEW)
    â”œâ”€â”€ database.py
    â”œâ”€â”€ load_data.py
    â”œâ”€â”€ main.py
    â”œâ”€â”€ models/
    â”‚   â”œâ”€â”€ product.py
    â”‚   â””â”€â”€ conversation.py
    â”œâ”€â”€ services/
    â”‚   â””â”€â”€ groq_client.py      âœ… (NEW)
    â””â”€â”€ __init__.py
.env                            âœ… (at project root)
ðŸ”§ Step-by-Step Implementation
âœ… Step 1: Install Required Packages
bash
Copy
Edit
pip install httpx python-dotenv
âœ… Step 2: Create .env File
ðŸ“„ .env

ini
Copy
Edit
GROQ_API_KEY=gsk_your_real_groq_key_here
âœ… Step 3: Create config.py
ðŸ“„ backend/app/config.py

python
Copy
Edit
import os
from dotenv import load_dotenv

load_dotenv()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
âœ… Step 4: Create Groq Client
ðŸ“„ backend/app/services/groq_client.py

python
Copy
Edit
import httpx
from app.config import GROQ_API_KEY

GROQ_MODEL = "mixtral-8x7b-32768"

def query_groq(prompt):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": GROQ_MODEL,
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = httpx.post(
            "https://api.groq.com/openai/v1/chat/completions",
            json=payload,
            headers=headers,
            timeout=15
        )
        result = response.json()
        return result["choices"][0]["message"]["content"]
    except Exception as e:
        return f"[Error from LLM]: {str(e)}"
âœ… Step 5: Update Chat API to Use Groq
ðŸ“„ backend/app/api/chat.py

python
Copy
Edit
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from sqlalchemy.orm import Session
from datetime import datetime
from app.database import get_db
from app.models.conversation import User, ConversationSession, ChatMessage
from app.services.groq_client import query_groq

router = APIRouter()

class ChatRequest(BaseModel):
    username: str
    message: str
    conversation_id: int | None = None

@router.post("/chat")
def chat_endpoint(req: ChatRequest, db: Session = next(get_db())):
    # 1. Get or create user
    user = db.query(User).filter(User.username == req.username).first()
    if not user:
        user = User(username=req.username)
        db.add(user)
        db.commit()
        db.refresh(user)

    # 2. Get or create session
    if req.conversation_id:
        session = db.query(ConversationSession).filter(
            ConversationSession.id == req.conversation_id).first()
        if not session:
            raise HTTPException(status_code=404, detail="Session not found")
    else:
        session = ConversationSession(user_id=user.id)
        db.add(session)
        db.commit()
        db.refresh(session)

    # 3. Save user message
    user_msg = ChatMessage(
        session_id=session.id,
        sender="user",
        message=req.message,
        timestamp=datetime.utcnow()
    )
    db.add(user_msg)

    # 4. Call Groq API to get response
    ai_response = query_groq(req.message)

    # 5. Save AI response
    bot_msg = ChatMessage(
        session_id=session.id,
        sender="bot",
        message=ai_response,
        timestamp=datetime.utcnow()
    )
    db.add(bot_msg)

    db.commit()

    return {
        "conversation_id": session.id,
        "user": req.username,
        "user_message": req.message,
        "bot_response": ai_response
    }
âœ… Step 6: Ensure .env is Loaded in main.py
ðŸ“„ backend/app/main.py

python
Copy
Edit
from fastapi import FastAPI
from app.api import chat
from app.database import engine
from app.models import conversation, product
from dotenv import load_dotenv

load_dotenv()  # Load .env variables

conversation.Base.metadata.create_all(bind=engine)
product.Base.metadata.create_all(bind=engine)

app = FastAPI()

app.include_router(chat.router, prefix="/api")
